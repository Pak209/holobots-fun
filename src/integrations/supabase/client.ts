
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://pfpidggrdnmfgrbncpyl.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBmcGlkZ2dyZG5tZmdyYm5jcHlsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA3ODM5ODcsImV4cCI6MjA1NjM1OTk4N30.fyR2E6WWCGmBTK322Tre7RRMh65I55kaPHF5RYJKGgo";

// Create the Supabase client
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: false // Disable auto detection to prevent redirect issues
    },
    realtime: {
      params: {
        eventsPerSecond: 10 // Increase events per second for better realtime updates
      }
    }
  }
);

// Helper functions
export const updateHolobotExperience = (holobots: any[], holobotName: string, newExperience: number, newLevel: number) => {
  if (!holobots || !Array.isArray(holobots)) {
    return [];
  }
  
  return holobots.map(holobot => {
    if (holobot.name.toLowerCase() === holobotName.toLowerCase()) {
      return {
        ...holobot,
        level: newLevel,
        experience: newExperience,
        nextLevelExp: calculateExperience(newLevel)
      };
    }
    return holobot;
  });
};

export const calculateExperience = (level: number) => {
  const BASE_XP = 100;
  return Math.floor(BASE_XP * Math.pow(level, 2));
};

// Constants for use in other files
export const HOLOBOT_STATS = {
  MAX_LEVEL: 50,
  BASE_HEALTH: 100,
  BASE_ATTACK: 10,
  BASE_DEFENSE: 5,
  BASE_SPEED: 8
};

// Add a safe update function to prevent ambiguous column references
export const safeUpdateUserProfile = async (userId: string, updateData: Partial<any>) => {
  try {
    // Make sure we're explicitly referencing the profiles table when updating
    const { data, error } = await supabase
      .from('profiles')
      .update(updateData)
      .eq('id', userId)
      .select();
    
    if (error) {
      console.error('Error updating user profile:', error);
      throw error;
    }
    
    return { data, error: null };
  } catch (err) {
    console.error('Failed to update profile:', err);
    return { data: null, error: err };
  }
};

// New function to get the daily boss rotation based on day of week
export const getDailyBossRotation = () => {
  const day = new Date().getDay(); // 0 = Sunday, 1 = Monday, etc.
  
  // Define different boss rotations for each day
  const rotations = {
    tier1: [
      ['aurora', 'hare', 'shiori'], // Sunday
      ['baxter', 'hare', 'pyro'],   // Monday
      ['nexus', 'aurora', 'hare'],  // Tuesday
      ['hare', 'shiori', 'nexus'],  // Wednesday
      ['pyro', 'hare', 'baxter'],   // Thursday
      ['hare', 'aurora', 'pyro'],   // Friday
      ['hare', 'tsuin', 'aurora']   // Saturday
    ],
    tier2: [
      ['synth', 'tsuin', 'cypher'], // Sunday
      ['void', 'tsuin', 'synth'],   // Monday
      ['cypher', 'tsuin', 'void'],  // Tuesday
      ['tsuin', 'synth', 'archon'], // Wednesday
      ['archon', 'tsuin', 'void'],  // Thursday
      ['void', 'tsuin', 'synth'],   // Friday
      ['tsuin', 'cypher', 'archon'] // Saturday
    ],
    tier3: [
      ['kurai', 'echo', 'lumina'],  // Sunday
      ['echo', 'kurai', 'rai'],     // Monday
      ['rai', 'kurai', 'flare'],    // Tuesday
      ['lumina', 'kurai', 'echo'],  // Wednesday
      ['flare', 'kurai', 'rai'],    // Thursday
      ['rai', 'kurai', 'lumina'],   // Friday
      ['kurai', 'flare', 'echo']    // Saturday
    ]
  };
  
  return {
    tier1: rotations.tier1[day],
    tier2: rotations.tier2[day],
    tier3: rotations.tier3[day]
  };
};
